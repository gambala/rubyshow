upstream puma_<%= fetch(:nginx_config_name) %> { <%
  @backends = [fetch(:puma_bind)].flatten.map do |m|
    etype, address = /(tcp|unix|ssl):\/{1,2}(.+)/.match(m).captures

    if etype =='unix'
      "server #{etype}:#{address} #{fetch(:nginx_socket_flags)};"
    else
      "server #{address.gsub(/0\.0\.0\.0(.+)/, "127.0.0.1\\1")} #{fetch(:nginx_http_flags)};"
    end
  end
%><% @backends.each do |server| %>
  <%= server %><% end %>
}

<% if fetch(:nginx_use_ssl) %>
server {
  listen 80;
  server_name <%= fetch(:nginx_server_name) %> *.<%= fetch(:nginx_server_name) %>;
  return 301 https://$host$request_uri;
}
server {
  listen 443 ssl http2;
  server_name www.<%= fetch(:nginx_server_name) %>;
  ssl_certificate /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/chain.pem;
  return 301 https://<%= fetch(:nginx_server_name) %>$request_uri;
}
<% else %>
server {
  listen 80;
  server_name www.<%= fetch(:nginx_server_name) %>;
  return 301 http://<%= fetch(:nginx_server_name) %>$request_uri;
}
<% end %>

server {
  listen <%= fetch(:nginx_use_ssl) ? '443 ssl http2' : '80' %>;
  server_name <%= fetch(:nginx_server_name) %> *.<%= fetch(:nginx_server_name) %>;

  merge_slashes off;
  rewrite (.*)//+(.*) $1/$2 permanent;
  rewrite ^/(.*)/$ /$1 permanent;

  client_max_body_size 4G;
  keepalive_timeout 10;
  root <%= current_path %>/public;
  error_page 500 502 503 504 /500.html;
  try_files $uri @puma_<%= fetch(:nginx_config_name) %>;

<% if fetch(:nginx_use_ssl) %>
  add_header Content-Security-Policy "block-all-mixed-content";
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options SAMEORIGIN;
  resolver 127.0.0.1 8.8.8.8;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_certificate /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/<%= fetch(:letsencrypt_path) %>/chain.pem;
<% end %>

  location @puma_<%= fetch(:nginx_config_name) %> {
    access_log <%= shared_path %>/log/nginx.access.log;
    error_log <%= shared_path %>/log/nginx.error.log;
    limit_req zone=one burst=10;
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
<% if fetch(:nginx_use_ssl) %>
    proxy_http_version 1.1;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header X-Real-IP $remote_addr;
<% end %>
  }

  location /.well-known {
    root /var/www/html;
  }

  location ~ ^/(assets|packs)/ {
    add_header Cache-Control public;
    expires max;
    gzip_static on;
<% if fetch(:nginx_use_ssl) %>
    add_header Content-Security-Policy "block-all-mixed-content";
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
<% end %>
  }

  location /nginx_status {
    stub_status;
  }

  location ~ (<%= fetch(:forbidden_locations).join('|') %>) {
    deny all;
    access_log off;
    error_log off;
  }

  location ~ \.php$ {
    return 501;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 501;
  }
}
